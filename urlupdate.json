IncomingMessage {
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: null,
    pipesCount: 0,
    flowing: true,
    ended: true,
    endEmitted: true,
    reading: false,
    sync: false,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    defaultEncoding: 'utf8',
    ranOut: false,
    awaitDrain: 0,
    readingMore: false,
    decoder: null,
    encoding: null
  },
  readable: false,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _handle: TCP {
      bytesRead: 720,
      _externalStream: {},
      fd: 13,
      reading: true,
      owner: [Circular],
      onread: [Function: onread],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: [Object],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    domain: null,
    _events: {
      end: [Object],
      finish: [Function: onSocketFinish],
      _socketEnd: [Function: onSocketEnd],
      drain: [Object],
      timeout: [Function],
      error: [Object],
      close: [Object],
      data: [Function: socketOnData],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 10,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    _bytesDispatched: 0,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8080'
    },
    _server: Server {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8080'
    },
    _idleTimeout: 120000,
    _idleNext: TimersList {
      _idleNext: [Circular],
      _idlePrev: [Circular],
      _timer: [Object],
      _unrefed: true,
      msecs: 120000
    },
    _idlePrev: TimersList {
      _idleNext: [Circular],
      _idlePrev: [Circular],
      _timer: [Object],
      _unrefed: true,
      msecs: 120000
    },
    _idleStart: 11518,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: onParserExecute],
      _headers: [],
      _url: '',
      _consumed: true,
      socket: [Circular],
      incoming: [Circular],
      outgoing: null,
      maxHeaderPairs: 2000,
      onIncoming: [Function: parserOnIncoming]
    },
    on: [Function: socketOnWrap],
    _paused: false,
    read: [Function],
    _consuming: true,
    _httpMessage: ServerResponse {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular],
      connection: [Circular],
      _header: null,
      _headers: [Object],
      _headerNames: [Object],
      _onPendingData: [Function: updateOutgoingData],
      req: [Circular],
      locals: {},
      writeHead: [Function: writeHead],
      _startAt: undefined,
      _startTime: undefined,
      __onFinished: [Object]
    },
    _peername: { address: '::ffff:10.0.2.2', family: 'IPv6', port: 51798 }
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _handle: TCP {
      bytesRead: 720,
      _externalStream: {},
      fd: 13,
      reading: true,
      owner: [Circular],
      onread: [Function: onread],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: [Object],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    domain: null,
    _events: {
      end: [Object],
      finish: [Function: onSocketFinish],
      _socketEnd: [Function: onSocketEnd],
      drain: [Object],
      timeout: [Function],
      error: [Object],
      close: [Object],
      data: [Function: socketOnData],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 10,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    _bytesDispatched: 0,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8080'
    },
    _server: Server {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8080'
    },
    _idleTimeout: 120000,
    _idleNext: TimersList {
      _idleNext: [Circular],
      _idlePrev: [Circular],
      _timer: [Object],
      _unrefed: true,
      msecs: 120000
    },
    _idlePrev: TimersList {
      _idleNext: [Circular],
      _idlePrev: [Circular],
      _timer: [Object],
      _unrefed: true,
      msecs: 120000
    },
    _idleStart: 11518,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: onParserExecute],
      _headers: [],
      _url: '',
      _consumed: true,
      socket: [Circular],
      incoming: [Circular],
      outgoing: null,
      maxHeaderPairs: 2000,
      onIncoming: [Function: parserOnIncoming]
    },
    on: [Function: socketOnWrap],
    _paused: false,
    read: [Function],
    _consuming: true,
    _httpMessage: ServerResponse {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular],
      connection: [Circular],
      _header: null,
      _headers: [Object],
      _headerNames: [Object],
      _onPendingData: [Function: updateOutgoingData],
      req: [Circular],
      locals: {},
      writeHead: [Function: writeHead],
      _startAt: undefined,
      _startTime: undefined,
      __onFinished: [Object]
    },
    _peername: { address: '::ffff:10.0.2.2', family: 'IPv6', port: 51798 }
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: {
    host: 'localhost:8080',
    connection: 'keep-alive',
    'content-length': '47',
    'cache-control': 'max-age=0',
    origin: 'http://localhost:8080',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',
    'content-type': 'application/x-www-form-urlencoded',
    accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    referer: 'http://localhost:8080/urls/b2xVn2?',
    'accept-encoding': 'gzip, deflate, br',
    'accept-language': 'en-CA,en-GB;q=0.8,en-US;q=0.6,en;q=0.4',
    cookie: 'gsScrollPos=; session=eyJ1c2VyX2lkIjoiNjY2YWFhIn0=; session.sig=VwhfrHRYYC-FFF1Tq_vlAZoi3jg'
  },
  rawHeaders: ['Host',
    'localhost:8080',
    'Connection',
    'keep-alive',
    'Content-Length',
    '47',
    'Cache-Control',
    'max-age=0',
    'Origin',
    'http://localhost:8080',
    'Upgrade-Insecure-Requests',
    '1',
    'User-Agent',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',
    'Content-Type',
    'application/x-www-form-urlencoded',
    'Accept',
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Referer',
    'http://localhost:8080/urls/b2xVn2?',
    'Accept-Encoding',
    'gzip, deflate, br',
    'Accept-Language',
    'en-CA,en-GB;q=0.8,en-US;q=0.6,en;q=0.4',
    'Cookie',
    'gsScrollPos=; session=eyJ1c2VyX2lkIjoiNjY2YWFhIn0=; session.sig=VwhfrHRYYC-FFF1Tq_vlAZoi3jg'
  ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/urls/b2xVn2',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: Socket {
    connecting: false,
    _hadError: false,
    _handle: TCP {
      bytesRead: 720,
      _externalStream: {},
      fd: 13,
      reading: true,
      owner: [Circular],
      onread: [Function: onread],
      onconnection: null,
      writeQueueSize: 0
    },
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: [Object],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null
    },
    readable: true,
    domain: null,
    _events: {
      end: [Object],
      finish: [Function: onSocketFinish],
      _socketEnd: [Function: onSocketEnd],
      drain: [Object],
      timeout: [Function],
      error: [Object],
      close: [Object],
      data: [Function: socketOnData],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 10,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function],
      writecb: null,
      writelen: 0,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    destroyed: false,
    _bytesDispatched: 0,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8080'
    },
    _server: Server {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [Object],
      _usingSlaves: false,
      _slaves: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      _pendingResponseData: 0,
      _connectionKey: '6::::8080'
    },
    _idleTimeout: 120000,
    _idleNext: TimersList {
      _idleNext: [Circular],
      _idlePrev: [Circular],
      _timer: [Object],
      _unrefed: true,
      msecs: 120000
    },
    _idlePrev: TimersList {
      _idleNext: [Circular],
      _idlePrev: [Circular],
      _timer: [Object],
      _unrefed: true,
      msecs: 120000
    },
    _idleStart: 11518,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: onParserExecute],
      _headers: [],
      _url: '',
      _consumed: true,
      socket: [Circular],
      incoming: [Circular],
      outgoing: null,
      maxHeaderPairs: 2000,
      onIncoming: [Function: parserOnIncoming]
    },
    on: [Function: socketOnWrap],
    _paused: false,
    read: [Function],
    _consuming: true,
    _httpMessage: ServerResponse {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Circular],
      connection: [Circular],
      _header: null,
      _headers: [Object],
      _headerNames: [Object],
      _onPendingData: [Function: updateOutgoingData],
      req: [Circular],
      locals: {},
      writeHead: [Function: writeHead],
      _startAt: undefined,
      _startTime: undefined,
      __onFinished: [Object]
    },
    _peername: { address: '::ffff:10.0.2.2', family: 'IPv6', port: 51798 }
  },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/urls/b2xVn2',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/urls/b2xVn2',
    path: '/urls/b2xVn2',
    href: '/urls/b2xVn2',
    _raw: '/urls/b2xVn2'
  },
  params: { id: 'b2xVn2' },
  query: {},
  res: ServerResponse {
    domain: null,
    _events: { finish: [Object], end: [Function: onevent] },
    _eventsCount: 2,
    _maxListeners: undefined,
    output: [],
    outputEncodings: [],
    outputCallbacks: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedHeader: {},
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _handle: [Object],
      _parent: null,
      _host: null,
      _readableState: [Object],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState: [Object],
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Object],
      _server: [Object],
      _idleTimeout: 120000,
      _idleNext: [Object],
      _idlePrev: [Object],
      _idleStart: 11518,
      parser: [Object],
      on: [Function: socketOnWrap],
      _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage: [Circular],
      _peername: [Object]
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _handle: [Object],
      _parent: null,
      _host: null,
      _readableState: [Object],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState: [Object],
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Object],
      _server: [Object],
      _idleTimeout: 120000,
      _idleNext: [Object],
      _idlePrev: [Object],
      _idleStart: 11518,
      parser: [Object],
      on: [Function: socketOnWrap],
      _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage: [Circular],
      _peername: [Object]
    },
    _header: null,
    _headers: { 'x-powered-by': 'Express', vary: 'X-HTTP-Method-Override' },
    _headerNames: { 'x-powered-by': 'X-Powered-By', vary: 'Vary' },
    _onPendingData: [Function: updateOutgoingData],
    req: [Circular],
    locals: {},
    writeHead: [Function: writeHead],
    _startAt: undefined,
    _startTime: undefined,
    __onFinished: {
      [Function: listener] queue: [Object] }
  },
  sessionCookies: Cookies {
    secure: undefined,
    request: [Circular],
    response: ServerResponse {
      domain: null,
      _events: [Object],
      _eventsCount: 2,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Object],
      connection: [Object],
      _header: null,
      _headers: [Object],
      _headerNames: [Object],
      _onPendingData: [Function: updateOutgoingData],
      req: [Circular],
      locals: {},
      writeHead: [Function: writeHead],
      _startAt: undefined,
      _startTime: undefined,
      __onFinished: [Object]
    },
    keys: Keygrip { sign: [Function], verify: [Function], index: [Function] }
  },
  sessionOptions: {},
  sessionKey: 'session',
  session: [Getter / Setter],
  body: { longURL: 'http://redacademy.ca' },
  _body: true,
  length: undefined,
  read: [Function],
  originalMethod: 'POST',
  _startAt: [7171, 255043815],
  _startTime: 2017 - 02 - 17 T10: 36: 11.583 Z,
  _remoteAddress: '::ffff:10.0.2.2',
  route: Route {
    path: '/urls/:id',
    stack: [
      [Object]
    ],
    methods: { post: true }
  }
}